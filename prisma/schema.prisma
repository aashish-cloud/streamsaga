// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  username       String   @unique
  imageUrl       String
  externalUserId String   @unique
  bio            String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  follower       Follow[] @relation("following")
  following      Follow[] @relation("follower")
  blockedBy      Block[]  @relation("blocked")
  blocked        Block[]  @relation("blocker")
  stream         Stream?
}

model Stream {
  id                  String  @id @default(auto()) @map("_id") @db.ObjectId
  name                String
  thumbnailUrl        String?
  ingressId           String? 
  serverUrl           String?
  streamKey           String?
  isLive              Boolean @default(false)
  isChatEnabled       Boolean @default(true)
  isChatDelayed       Boolean @default(false)
  isChatFollowersOnly Boolean @default(false)
  userId              String  @unique @db.ObjectId
  user                User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@fulltext([name])
}

model Follow {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String   @db.ObjectId
  follower    User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String   @db.ObjectId
  following   User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}

model Block {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  blockerId String   @db.ObjectId
  blocker   User     @relation("blocker", fields: [blockerId], references: [id], onDelete: Cascade)
  blockedId String   @db.ObjectId
  blocked   User     @relation("blocked", fields: [blockedId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([blockerId, blockedId])
  @@index([blockerId])
  @@index([blockedId])
}
